/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package equipo29.tema5.Vistas;

import equipo29.tema5.Conexion.CitaData;
import equipo29.tema5.Conexion.CiudadanoData;
import equipo29.tema5.Conexion.VacunaData;
import equipo29.tema5.Conexion.VacunatorioData;
import equipo29.tema5.Data.Cita;
import equipo29.tema5.Data.Ciudadano;
import equipo29.tema5.Data.Vacuna;
import equipo29.tema5.Data.Vacunatorio;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author juanma
 */
public class ABMCitas extends javax.swing.JInternalFrame {

    private CitaData citad;
    private CiudadanoData cd;
    private VacunatorioData cvd;
    private VacunaData vd;
    private List<Vacunatorio> listaVacu = new ArrayList<>();
    private List<Ciudadano> listaCiu = new ArrayList<>();
    /**
     * Creates new form ABMCitas
     */
    public ABMCitas(CitaData citad, CiudadanoData cd, VacunatorioData cvd, VacunaData vd) {
        initComponents();
        this.citad = citad;
        this.cd = cd;
        this.cvd = cvd;
        this.vd = vd;
        armarComboCiudadano();
        armarComboRefuerzo(null);
        armarComboHorario(null);
        cargarComboVacunatorio(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboCiudadano = new javax.swing.JComboBox();
        fecha = new com.toedter.calendar.JDateChooser();
        salir = new javax.swing.JButton();
        limpiar = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        confirmar = new javax.swing.JButton();
        hora = new javax.swing.JComboBox<>();
        vacunatorio = new javax.swing.JComboBox<>();
        patologia = new javax.swing.JCheckBox();
        esencial = new javax.swing.JCheckBox();
        idCita = new javax.swing.JTextField();
        codigoRefuerzo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        comboCiudadano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCiudadanoActionPerformed(evt);
            }
        });

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        modificar.setText("Modificar");
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        confirmar.setText("Confirmar Aplicación");
        confirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarActionPerformed(evt);
            }
        });

        patologia.setText("Patología");
        patologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patologiaActionPerformed(evt);
            }
        });

        esencial.setText("Esencial");
        esencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esencialActionPerformed(evt);
            }
        });

        idCita.setVisible(false);

        jLabel1.setText("Refuerzo");

        jLabel2.setText("Vacunatorio");

        jLabel3.setText("Ciudadano");

        jLabel4.setText("Fecha");

        jLabel5.setText("Horario");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guardar)
                        .addGap(18, 18, 18)
                        .addComponent(modificar)
                        .addGap(18, 18, 18)
                        .addComponent(limpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salir))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(vacunatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(confirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel5)
                                            .addGap(18, 18, 18)
                                            .addComponent(hora, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(comboCiudadano, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(patologia, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(51, 51, 51)
                                        .addComponent(esencial, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(idCita, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(23, 23, 23))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(36, 36, 36)
                                .addComponent(codigoRefuerzo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patologia, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(esencial, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboCiudadano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(codigoRefuerzo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(vacunatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salir)
                    .addComponent(limpiar)
                    .addComponent(modificar)
                    .addComponent(guardar))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_salirActionPerformed

    private void comboCiudadanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCiudadanoActionPerformed
        // TODO add your handling code here:
        try {

            if (!comboCiudadano.getSelectedItem().toString().isEmpty()) {

                CiudadanoData cd = new CiudadanoData();

                Ciudadano ciu = (Ciudadano) comboCiudadano.getSelectedItem();

                Cita cita = citad.buscarCita(ciu.getDni());

                try {

                    idCita.setText(cita.getCodCita() + "");

                    fecha.setDate(Date.valueOf(cita.getFechaHoraCita().substring(0, 10)));

                    String horario = cita.getFechaHoraCita().substring(11, 16);

                    armarComboHorario(horario);

                    cargarComboVacunatorio(cita.getVacunatorio().toString());

                    armarComboRefuerzo(String.valueOf(cita.getCodRefuerzo()));

                } catch (StringIndexOutOfBoundsException ex) {

                }

            } else {

                String horario = null;

                armarComboHorario(horario);

                String vacun = null;

                cargarComboVacunatorio(vacun);

            }

        } catch (NullPointerException ex) {
            
        }

    }//GEN-LAST:event_comboCiudadanoActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
        
        if (!hora.getSelectedItem().toString().isEmpty() && fecha.getDate() != null && !comboCiudadano.getSelectedItem().toString().isEmpty() && !vacunatorio.getSelectedItem().toString().isEmpty() && !codigoRefuerzo.getSelectedItem().toString().isEmpty()) {
            try {
                Ciudadano ciudadano = (Ciudadano) comboCiudadano.getSelectedItem();
                int cr = Integer.parseInt(codigoRefuerzo.getSelectedItem().toString());
                String fech = fecha.getDate().toInstant().toString().substring(0, 10);
                String hor = hora.getSelectedItem().toString();
                Vacunatorio vacun = cvd.buscarVacunatorioDescipcion(vacunatorio.getSelectedItem().toString());
                Vacuna vacuna = vd.buscarVacunaDisponible();
                if (!vacuna.getMarca().isEmpty()) {
                    citad.guardarCita(new Cita(ciudadano, cr, fech + " " + hor, vacuna, vacun));
                    vd.bajaVacuna(vacuna.getNroSerie());
                } else {
                    //JOptionPane.showMessageDialog(null, "Verifique la disponibilidad de Vacunas ");
                }
            } catch (SQLException ex) {

            } catch (NullPointerException ex) {
                
            }

        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un Ciudadano y complete todos los campos");
        }
        
    }//GEN-LAST:event_guardarActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        // TODO add your handling code here:
        comboCiudadano.removeAllItems();
        armarComboRefuerzo(null);
        fecha.setDate(null);
        hora.removeAllItems();
        vacunatorio.removeAllItems();
        patologia.setSelected(false);
        esencial.setSelected(false);
        armarComboCiudadano();
        cargarComboVacunatorio(null);
    }//GEN-LAST:event_limpiarActionPerformed

    private void patologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patologiaActionPerformed
        // TODO add your handling code here:
        armarComboCiudadano();
        if(!patologia.isSelected()){
            limpiarActionPerformed(evt);
        }
    }//GEN-LAST:event_patologiaActionPerformed

    private void esencialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esencialActionPerformed
        // TODO add your handling code here:
        armarComboCiudadano();
        if(!esencial.isSelected()){
            limpiarActionPerformed(evt);
        }
    }//GEN-LAST:event_esencialActionPerformed

    private void confirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarActionPerformed
        // TODO add your handling code here:
        try {
            citad.confirmarAplicacion(Integer.parseInt(idCita.getText()));
            Ciudadano ciudadano = (Ciudadano) comboCiudadano.getSelectedItem();
            if (citad.verificarRefuerzo(ciudadano.getDni())) {
                cd.bajaCiudadano(ciudadano.getDni());
            } else {
                int cr = Integer.parseInt(codigoRefuerzo.getSelectedItem().toString()) + 1;                
                String fechaHoraActual = citad.sumar4Semanas(citad.fechaHoraActual()+" "+hora.getSelectedItem());
                Vacunatorio vacun = cvd.buscarVacunatorioDescipcion(vacunatorio.getSelectedItem().toString());
                Vacuna vacuna = vd.buscarVacunaDisponible();
                if (!vacuna.getMarca().isEmpty()) {
                    citad.guardarCita(new Cita(ciudadano, cr, fechaHoraActual, vacuna, vacun));
                    vd.bajaVacuna(vacuna.getNroSerie());
                }
            }
        } catch (SQLException ex) {

        } catch (NullPointerException ex) {

        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Seleccione un ciudadano con cita asignada antes de confirmar una aplicacion");
        }
    }//GEN-LAST:event_confirmarActionPerformed

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
        // TODO add your handling code here:
        if (!comboCiudadano.getSelectedItem().toString().isEmpty() && !idCita.getText().isEmpty() && fecha.getDate() != null && !hora.getSelectedItem().toString().isEmpty() && !vacunatorio.getSelectedItem().toString().isEmpty() && !codigoRefuerzo.getSelectedItem().toString().isEmpty()) {
            try {
                Ciudadano ciudadano = (Ciudadano) comboCiudadano.getSelectedItem();
                int cc = Integer.parseInt(idCita.getText());
                int cr = Integer.parseInt(codigoRefuerzo.getSelectedItem().toString());
                String fech = fecha.getDate().toInstant().toString().substring(0, 10);
                String hor = hora.getSelectedItem().toString();
                Vacunatorio vacun = cvd.buscarVacunatorioDescipcion(vacunatorio.getSelectedItem().toString());
                citad.modificarCita(new Cita(cc, cr, fech + " " + hor, vacun));
            } catch (NullPointerException ex) {
                
            } 

        } else {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
        }
    }//GEN-LAST:event_modificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> codigoRefuerzo;
    private javax.swing.JComboBox comboCiudadano;
    private javax.swing.JButton confirmar;
    private javax.swing.JCheckBox esencial;
    private com.toedter.calendar.JDateChooser fecha;
    private javax.swing.JButton guardar;
    private javax.swing.JComboBox<String> hora;
    private javax.swing.JTextField idCita;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton modificar;
    private javax.swing.JCheckBox patologia;
    private javax.swing.JButton salir;
    private javax.swing.JComboBox<String> vacunatorio;
    // End of variables declaration//GEN-END:variables

    private void armarComboCiudadano() {
        CiudadanoData cd = new CiudadanoData();
        comboCiudadano.removeAllItems();

        if (!patologia.isSelected() && !esencial.isSelected()) {
            comboCiudadano.removeAllItems();
            comboCiudadano.addItem("");
            listaCiu = cd.listarCiudadanos();
            Collections.sort(listaCiu);
            for (Ciudadano ciu : listaCiu) {
                comboCiudadano.addItem(ciu);
            }
        } else if (patologia.isSelected() && !esencial.isSelected()) {
            comboCiudadano.removeAllItems();
            comboCiudadano.addItem("");
            listaCiu = cd.listarCiudadanosPatologia();
            Collections.sort(listaCiu);
            for (Ciudadano ciu : listaCiu) {
                comboCiudadano.addItem(ciu);
            }
        } else if (patologia.isSelected() && esencial.isSelected()) {
            comboCiudadano.removeAllItems();
            comboCiudadano.addItem("");
            listaCiu = cd.listarCiudadanosPatologiaEsenciales();
            Collections.sort(listaCiu);
            for (Ciudadano ciu : listaCiu) {
                comboCiudadano.addItem(ciu);
            }
        } else if (!patologia.isSelected() && esencial.isSelected()) {
            comboCiudadano.removeAllItems();
            comboCiudadano.addItem("");
            listaCiu = cd.listarCiudadanosEsenciales();
            Collections.sort(listaCiu);
            for (Ciudadano ciu : listaCiu) {
                comboCiudadano.addItem(ciu);
            }
        }

    }

    private void armarComboHorario(String horario) {
        hora.removeAllItems();
        hora.addItem("");
        for (int i = 9; i < 18; i++) {
            for (int j = 0; j < 46; j += 15) {
                if (i == 9 && j == 0) {
                    hora.addItem("0" + i + ":" + j + "0");
                } else if (i == 9) {
                    hora.addItem("0" + i + ":" + j);
                } else if (j == 0) {
                    hora.addItem(i + ":" + j + "0");
                } else {
                    hora.addItem(i + ":" + j);
                }
            }
        }
        if (horario != null) {
            hora.setSelectedItem(horario);
        }
    }

    private void cargarComboVacunatorio(String vacu) {
        VacunatorioData cvd = new VacunatorioData();
        vacunatorio.removeAllItems();
        vacunatorio.addItem("");
        listaVacu = cvd.listarVacunatorios();
        Collections.sort(listaVacu);
        for (Vacunatorio cv : listaVacu) {
            vacunatorio.addItem(cv.toString());
        }
        if (vacu != null) {
            vacunatorio.setSelectedItem(vacu);
        }
    }

    private void armarComboRefuerzo(String cr) {
        codigoRefuerzo.removeAllItems();
        codigoRefuerzo.addItem("");
        codigoRefuerzo.addItem("1");
        codigoRefuerzo.addItem("2");
        codigoRefuerzo.addItem("3");
        if (cr != null) {
            codigoRefuerzo.setSelectedItem(cr);
        }
    }
}
